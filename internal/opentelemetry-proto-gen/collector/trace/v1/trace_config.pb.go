// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opentelemetry/proto/trace/v1/trace_config.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// How spans should be sampled:
// - Always off
// - Always on
// - Always follow the parent Span's decision (off if no parent).
type ConstantSampler_ConstantDecision int32

const (
	ConstantSampler_ALWAYS_OFF    ConstantSampler_ConstantDecision = 0
	ConstantSampler_ALWAYS_ON     ConstantSampler_ConstantDecision = 1
	ConstantSampler_ALWAYS_PARENT ConstantSampler_ConstantDecision = 2
)

var ConstantSampler_ConstantDecision_name = map[int32]string{
	0: "ALWAYS_OFF",
	1: "ALWAYS_ON",
	2: "ALWAYS_PARENT",
}

var ConstantSampler_ConstantDecision_value = map[string]int32{
	"ALWAYS_OFF":    0,
	"ALWAYS_ON":     1,
	"ALWAYS_PARENT": 2,
}

func (x ConstantSampler_ConstantDecision) String() string {
	return proto.EnumName(ConstantSampler_ConstantDecision_name, int32(x))
}

func (ConstantSampler_ConstantDecision) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5936aa8fa6443e6f, []int{1, 0}
}

// Global configuration of the trace service. All fields must be specified, or
// the default (zero) values will be used for each type.
type TraceConfig struct {
	// The global default sampler used to make decisions on span sampling.
	//
	// Types that are valid to be assigned to Sampler:
	//	*TraceConfig_ConstantSampler
	//	*TraceConfig_ProbabilitySampler
	//	*TraceConfig_RateLimitingSampler
	Sampler isTraceConfig_Sampler `protobuf_oneof:"sampler"`
	// The global default max number of attributes per span.
	MaxNumberOfAttributes int64 `protobuf:"varint,4,opt,name=max_number_of_attributes,json=maxNumberOfAttributes,proto3" json:"max_number_of_attributes,omitempty"`
	// The global default max number of annotation events per span.
	MaxNumberOfTimedEvents int64 `protobuf:"varint,5,opt,name=max_number_of_timed_events,json=maxNumberOfTimedEvents,proto3" json:"max_number_of_timed_events,omitempty"`
	// The global default max number of attributes per timed event.
	MaxNumberOfAttributesPerTimedEvent int64 `protobuf:"varint,6,opt,name=max_number_of_attributes_per_timed_event,json=maxNumberOfAttributesPerTimedEvent,proto3" json:"max_number_of_attributes_per_timed_event,omitempty"`
	// The global default max number of link entries per span.
	MaxNumberOfLinks int64 `protobuf:"varint,7,opt,name=max_number_of_links,json=maxNumberOfLinks,proto3" json:"max_number_of_links,omitempty"`
	// The global default max number of attributes per span.
	MaxNumberOfAttributesPerLink int64    `protobuf:"varint,8,opt,name=max_number_of_attributes_per_link,json=maxNumberOfAttributesPerLink,proto3" json:"max_number_of_attributes_per_link,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *TraceConfig) Reset()         { *m = TraceConfig{} }
func (m *TraceConfig) String() string { return proto.CompactTextString(m) }
func (*TraceConfig) ProtoMessage()    {}
func (*TraceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5936aa8fa6443e6f, []int{0}
}

func (m *TraceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceConfig.Unmarshal(m, b)
}
func (m *TraceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceConfig.Marshal(b, m, deterministic)
}
func (m *TraceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceConfig.Merge(m, src)
}
func (m *TraceConfig) XXX_Size() int {
	return xxx_messageInfo_TraceConfig.Size(m)
}
func (m *TraceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TraceConfig proto.InternalMessageInfo

type isTraceConfig_Sampler interface {
	isTraceConfig_Sampler()
}

type TraceConfig_ConstantSampler struct {
	ConstantSampler *ConstantSampler `protobuf:"bytes,1,opt,name=constant_sampler,json=constantSampler,proto3,oneof"`
}

type TraceConfig_ProbabilitySampler struct {
	ProbabilitySampler *ProbabilitySampler `protobuf:"bytes,2,opt,name=probability_sampler,json=probabilitySampler,proto3,oneof"`
}

type TraceConfig_RateLimitingSampler struct {
	RateLimitingSampler *RateLimitingSampler `protobuf:"bytes,3,opt,name=rate_limiting_sampler,json=rateLimitingSampler,proto3,oneof"`
}

func (*TraceConfig_ConstantSampler) isTraceConfig_Sampler() {}

func (*TraceConfig_ProbabilitySampler) isTraceConfig_Sampler() {}

func (*TraceConfig_RateLimitingSampler) isTraceConfig_Sampler() {}

func (m *TraceConfig) GetSampler() isTraceConfig_Sampler {
	if m != nil {
		return m.Sampler
	}
	return nil
}

func (m *TraceConfig) GetConstantSampler() *ConstantSampler {
	if x, ok := m.GetSampler().(*TraceConfig_ConstantSampler); ok {
		return x.ConstantSampler
	}
	return nil
}

func (m *TraceConfig) GetProbabilitySampler() *ProbabilitySampler {
	if x, ok := m.GetSampler().(*TraceConfig_ProbabilitySampler); ok {
		return x.ProbabilitySampler
	}
	return nil
}

func (m *TraceConfig) GetRateLimitingSampler() *RateLimitingSampler {
	if x, ok := m.GetSampler().(*TraceConfig_RateLimitingSampler); ok {
		return x.RateLimitingSampler
	}
	return nil
}

func (m *TraceConfig) GetMaxNumberOfAttributes() int64 {
	if m != nil {
		return m.MaxNumberOfAttributes
	}
	return 0
}

func (m *TraceConfig) GetMaxNumberOfTimedEvents() int64 {
	if m != nil {
		return m.MaxNumberOfTimedEvents
	}
	return 0
}

func (m *TraceConfig) GetMaxNumberOfAttributesPerTimedEvent() int64 {
	if m != nil {
		return m.MaxNumberOfAttributesPerTimedEvent
	}
	return 0
}

func (m *TraceConfig) GetMaxNumberOfLinks() int64 {
	if m != nil {
		return m.MaxNumberOfLinks
	}
	return 0
}

func (m *TraceConfig) GetMaxNumberOfAttributesPerLink() int64 {
	if m != nil {
		return m.MaxNumberOfAttributesPerLink
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TraceConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TraceConfig_ConstantSampler)(nil),
		(*TraceConfig_ProbabilitySampler)(nil),
		(*TraceConfig_RateLimitingSampler)(nil),
	}
}

// Sampler that always makes a constant decision on span sampling.
type ConstantSampler struct {
	Decision             ConstantSampler_ConstantDecision `protobuf:"varint,1,opt,name=decision,proto3,enum=opentelemetry.proto.trace.v1.ConstantSampler_ConstantDecision" json:"decision,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *ConstantSampler) Reset()         { *m = ConstantSampler{} }
func (m *ConstantSampler) String() string { return proto.CompactTextString(m) }
func (*ConstantSampler) ProtoMessage()    {}
func (*ConstantSampler) Descriptor() ([]byte, []int) {
	return fileDescriptor_5936aa8fa6443e6f, []int{1}
}

func (m *ConstantSampler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConstantSampler.Unmarshal(m, b)
}
func (m *ConstantSampler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConstantSampler.Marshal(b, m, deterministic)
}
func (m *ConstantSampler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstantSampler.Merge(m, src)
}
func (m *ConstantSampler) XXX_Size() int {
	return xxx_messageInfo_ConstantSampler.Size(m)
}
func (m *ConstantSampler) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstantSampler.DiscardUnknown(m)
}

var xxx_messageInfo_ConstantSampler proto.InternalMessageInfo

func (m *ConstantSampler) GetDecision() ConstantSampler_ConstantDecision {
	if m != nil {
		return m.Decision
	}
	return ConstantSampler_ALWAYS_OFF
}

// Sampler that tries to uniformly sample traces with a given probability.
// The probability of sampling a trace is equal to that of the specified probability.
type ProbabilitySampler struct {
	// The desired probability of sampling. Must be within [0.0, 1.0].
	SamplingProbability  float64  `protobuf:"fixed64,1,opt,name=samplingProbability,proto3" json:"samplingProbability,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbabilitySampler) Reset()         { *m = ProbabilitySampler{} }
func (m *ProbabilitySampler) String() string { return proto.CompactTextString(m) }
func (*ProbabilitySampler) ProtoMessage()    {}
func (*ProbabilitySampler) Descriptor() ([]byte, []int) {
	return fileDescriptor_5936aa8fa6443e6f, []int{2}
}

func (m *ProbabilitySampler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbabilitySampler.Unmarshal(m, b)
}
func (m *ProbabilitySampler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbabilitySampler.Marshal(b, m, deterministic)
}
func (m *ProbabilitySampler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbabilitySampler.Merge(m, src)
}
func (m *ProbabilitySampler) XXX_Size() int {
	return xxx_messageInfo_ProbabilitySampler.Size(m)
}
func (m *ProbabilitySampler) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbabilitySampler.DiscardUnknown(m)
}

var xxx_messageInfo_ProbabilitySampler proto.InternalMessageInfo

func (m *ProbabilitySampler) GetSamplingProbability() float64 {
	if m != nil {
		return m.SamplingProbability
	}
	return 0
}

// Sampler that tries to sample with a rate per time window.
type RateLimitingSampler struct {
	// Rate per second.
	Qps                  int64    `protobuf:"varint,1,opt,name=qps,proto3" json:"qps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RateLimitingSampler) Reset()         { *m = RateLimitingSampler{} }
func (m *RateLimitingSampler) String() string { return proto.CompactTextString(m) }
func (*RateLimitingSampler) ProtoMessage()    {}
func (*RateLimitingSampler) Descriptor() ([]byte, []int) {
	return fileDescriptor_5936aa8fa6443e6f, []int{3}
}

func (m *RateLimitingSampler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RateLimitingSampler.Unmarshal(m, b)
}
func (m *RateLimitingSampler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RateLimitingSampler.Marshal(b, m, deterministic)
}
func (m *RateLimitingSampler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateLimitingSampler.Merge(m, src)
}
func (m *RateLimitingSampler) XXX_Size() int {
	return xxx_messageInfo_RateLimitingSampler.Size(m)
}
func (m *RateLimitingSampler) XXX_DiscardUnknown() {
	xxx_messageInfo_RateLimitingSampler.DiscardUnknown(m)
}

var xxx_messageInfo_RateLimitingSampler proto.InternalMessageInfo

func (m *RateLimitingSampler) GetQps() int64 {
	if m != nil {
		return m.Qps
	}
	return 0
}

func init() {
	proto.RegisterEnum("opentelemetry.proto.trace.v1.ConstantSampler_ConstantDecision", ConstantSampler_ConstantDecision_name, ConstantSampler_ConstantDecision_value)
	proto.RegisterType((*TraceConfig)(nil), "opentelemetry.proto.trace.v1.TraceConfig")
	proto.RegisterType((*ConstantSampler)(nil), "opentelemetry.proto.trace.v1.ConstantSampler")
	proto.RegisterType((*ProbabilitySampler)(nil), "opentelemetry.proto.trace.v1.ProbabilitySampler")
	proto.RegisterType((*RateLimitingSampler)(nil), "opentelemetry.proto.trace.v1.RateLimitingSampler")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/trace/v1/trace_config.proto", fileDescriptor_5936aa8fa6443e6f)
}

var fileDescriptor_5936aa8fa6443e6f = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x6f, 0x9b, 0x40,
	0x10, 0xc5, 0x43, 0xdc, 0xfc, 0x9b, 0x28, 0x09, 0x5d, 0x2b, 0x15, 0xaa, 0x22, 0x35, 0xe5, 0x52,
	0x5f, 0x6c, 0xe2, 0xf4, 0x50, 0xa9, 0x87, 0x4a, 0x76, 0x12, 0xb7, 0x07, 0xcb, 0xb1, 0x88, 0xa5,
	0xaa, 0xbe, 0xa0, 0x85, 0x8c, 0xd1, 0xaa, 0xb0, 0x4b, 0x97, 0x8d, 0x95, 0x9c, 0xab, 0x7e, 0xa2,
	0x7e, 0xc1, 0x8a, 0x35, 0xc5, 0x60, 0x3b, 0x48, 0xb9, 0xed, 0xcc, 0xe3, 0xfd, 0xde, 0x2e, 0x0c,
	0x0b, 0x8e, 0x48, 0x90, 0x2b, 0x8c, 0x30, 0x46, 0x25, 0x9f, 0x9c, 0x44, 0x0a, 0x25, 0x1c, 0x25,
	0x69, 0x80, 0xce, 0xbc, 0xbb, 0x58, 0x78, 0x81, 0xe0, 0x33, 0x16, 0x76, 0xb4, 0x46, 0xce, 0x2a,
	0x86, 0x45, 0xb3, 0xa3, 0x9f, 0xeb, 0xcc, 0xbb, 0xf6, 0x9f, 0x1d, 0x38, 0x9c, 0x64, 0xc5, 0x95,
	0xf6, 0x90, 0x29, 0x98, 0x81, 0xe0, 0xa9, 0xa2, 0x5c, 0x79, 0x29, 0x8d, 0x93, 0x08, 0xa5, 0x65,
	0x9c, 0x1b, 0xad, 0xc3, 0xcb, 0x76, 0xa7, 0x0e, 0xd4, 0xb9, 0xca, 0x5d, 0x77, 0x0b, 0xd3, 0xb7,
	0x2d, 0xf7, 0x24, 0xa8, 0xb6, 0x48, 0x00, 0xcd, 0x44, 0x0a, 0x9f, 0xfa, 0x2c, 0x62, 0xea, 0xa9,
	0xc0, 0x6f, 0x6b, 0xfc, 0x45, 0x3d, 0x7e, 0xbc, 0x34, 0x2e, 0x13, 0x48, 0xb2, 0xd6, 0x25, 0x21,
	0x9c, 0x4a, 0xaa, 0xd0, 0x8b, 0x58, 0xcc, 0x14, 0xe3, 0x61, 0x11, 0xd3, 0xd0, 0x31, 0xdd, 0xfa,
	0x18, 0x97, 0x2a, 0x1c, 0xe6, 0xce, 0x65, 0x4e, 0x53, 0xae, 0xb7, 0xc9, 0x27, 0xb0, 0x62, 0xfa,
	0xe8, 0xf1, 0x87, 0xd8, 0x47, 0xe9, 0x89, 0x99, 0x47, 0x95, 0x92, 0xcc, 0x7f, 0x50, 0x98, 0x5a,
	0xaf, 0xce, 0x8d, 0x56, 0xc3, 0x3d, 0x8d, 0xe9, 0xe3, 0x48, 0xcb, 0xb7, 0xb3, 0x5e, 0x21, 0x92,
	0xcf, 0xf0, 0xb6, 0x6a, 0x54, 0x2c, 0xc6, 0x7b, 0x0f, 0xe7, 0xc8, 0x55, 0x6a, 0xed, 0x68, 0xeb,
	0x9b, 0x92, 0x75, 0x92, 0xc9, 0x37, 0x5a, 0x25, 0x13, 0x68, 0x3d, 0x17, 0xea, 0x25, 0x28, 0xcb,
	0x28, 0x6b, 0x57, 0x93, 0xec, 0x8d, 0x9b, 0x18, 0xa3, 0x5c, 0x62, 0x49, 0x1b, 0x9a, 0x55, 0x6a,
	0xc4, 0xf8, 0xcf, 0xd4, 0xda, 0xd3, 0x00, 0xb3, 0x04, 0x18, 0x66, 0x7d, 0xf2, 0x15, 0xde, 0xd7,
	0x6e, 0x22, 0x73, 0x5b, 0xfb, 0xda, 0x7c, 0xf6, 0x5c, 0x7a, 0x46, 0xea, 0x1f, 0xc0, 0x5e, 0xfe,
	0x75, 0xec, 0xbf, 0x06, 0x9c, 0xac, 0x8c, 0x10, 0x99, 0xc2, 0xfe, 0x3d, 0x06, 0x2c, 0x65, 0x82,
	0xeb, 0x19, 0x3c, 0xbe, 0xfc, 0xf2, 0xa2, 0x19, 0x2c, 0xea, 0xeb, 0x9c, 0xe2, 0x16, 0x3c, 0xfb,
	0x1a, 0xcc, 0x55, 0x95, 0x1c, 0x03, 0xf4, 0x86, 0xdf, 0x7b, 0x3f, 0xee, 0xbc, 0xdb, 0xc1, 0xc0,
	0xdc, 0x22, 0x47, 0x70, 0xf0, 0xbf, 0x1e, 0x99, 0x06, 0x79, 0x0d, 0x47, 0x79, 0x39, 0xee, 0xb9,
	0x37, 0xa3, 0x89, 0xb9, 0x6d, 0x0f, 0x80, 0xac, 0x0f, 0x26, 0xb9, 0x80, 0xa6, 0x3e, 0x16, 0xe3,
	0x61, 0x49, 0xd5, 0x47, 0x30, 0xdc, 0x4d, 0x92, 0xfd, 0x01, 0x9a, 0x1b, 0x26, 0x8f, 0x98, 0xd0,
	0xf8, 0x95, 0xa4, 0xda, 0xd8, 0x70, 0xb3, 0x65, 0xff, 0xb7, 0x01, 0xef, 0x98, 0xa8, 0x7d, 0x0b,
	0x7d, 0xb3, 0xf4, 0x3f, 0x8f, 0x33, 0x69, 0x6c, 0x4c, 0x87, 0xe1, 0xaa, 0x89, 0x09, 0x47, 0x28,
	0x8c, 0x1c, 0xc6, 0x15, 0x4a, 0x4e, 0xa3, 0xea, 0xbd, 0xd2, 0xd6, 0xcc, 0x76, 0x88, 0xdc, 0x09,
	0x44, 0x14, 0x61, 0xa0, 0x84, 0x2c, 0x6e, 0x19, 0x7f, 0x57, 0xab, 0x1f, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0xb2, 0x4e, 0x84, 0x8c, 0x04, 0x00, 0x00,
}
